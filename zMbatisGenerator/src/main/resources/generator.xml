<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!-- 数据库驱动包位置 -->
    <!-- <classPathEntry location="C:/Users/admin/.m2/repository/mysql/mysql-connector-java/5.1.41/mysql-connector-java-5.1.41.jar" 
        /> -->
    <!-- <classPathEntry location="C:/oracle/product/10.2.0/db_1/jdbc/lib/ojdbc14.jar" /> -->

    <!-- 引入配置文件属性 -->
    <properties resource="generator.properties" />
    <!-- context:生成一组对象的环境 -->
    <!-- id:必选，上下文id，用于在生成错误时提示 -->
    <!-- defaultModelType:指定生成对象的样式 -->
    <!-- 1，conditional：类似hierarchical； -->
    <!-- 2，flat：所有内容（主键，blob）等全部生成在一个对象中； -->
    <!-- 3，hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class) -->
    <!-- targetRuntime: -->
    <!-- 1，MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample； -->
    <!-- 2，MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample； -->
    <!-- introspectedColumnImpl：类全限定名，用于扩展MBG -->
    <context id="DB2Tables" targetRuntime="MyBatis3" defaultModelType="flat">

        <!-- 指定生成的java文件的编码,没有直接生成到项目时中文可能会乱码 -->
        <property name="javaFileEncoding" value="UTF-8" />
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter" />
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter" />

        <!-- 覆盖生成的文件 -->
        <plugin type="com.tangjf.generator.OverIsMergeablePlugin" />
        <!-- 序列化 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin" />

        <!-- 自定义注释 -->
        <commentGenerator type="com.tangjf.generator.MyCommentGenerator" />
        <!-- 数据库链接URL、用户名、密码 -->
        <jdbcConnection driverClass="${jdbc.driverClass}" connectionURL="${jdbc.url}" userId="${jdbc.userId}"
            password="${jdbc.password}">
        </jdbcConnection>
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>
        <!-- 生成实体类的包名和位置，这里配置将生成的实体类放在com.tangjf.domain这个包下 -->
        <javaModelGenerator targetPackage="${model.package}" targetProject="${target.project}">
            <property name="enableSubPackages" value="true" />
        </javaModelGenerator>
        <!-- 生成的SQL映射文件包名和位置，这里配置将生成的SQL映射文件放在com.tangjf.mapping这个包下 -->
        <sqlMapGenerator targetPackage="${xml.package}" targetProject="${target.project.resources}">
            <property name="enableSubPackages" value="true" />
        </sqlMapGenerator>
        <!-- 生成DAO的包名和位置，这里配置将生成的dao类放在com.tangjf.dao这个包下 -->
        <javaClientGenerator targetPackage="${mapper.package}" targetProject="${target.project}"
            type="XMLMAPPER">
            <property name="enableSubPackages" value="true" />
            <!-- 可以为所有生成的接口添加一个父接口，但是MBG只负责生成，不负责检查 -->
            <property name="rootInterface" value="com.tangjf.base.BaseMapper" />
        </javaClientGenerator>
        <!-- 要生成那些表(更改tableName和domainObjectName就可以) -->
        <table tableName="${tableName}" domainObjectName="${domainObjectName}" enableCountByExample="false"
            enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false"
            selectByExampleQueryId="false">
            <!-- 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate -->
            <property name="useActualColumnNames" value="true" />
        </table>
    </context>
</generatorConfiguration>